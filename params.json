{"name":"IQKeyboardManager","tagline":"Keyboard TextField Manager","body":"<p align=\"center\">\r\n  <img src=\"https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/KeyboardTextFieldDemo/KeyboardTextFieldDemo/icon.png\" alt=\"Icon\"/>\r\n</p>\r\n<H1 align=\"center\">IQKeyboardManager</H1>\r\n\r\nOften while developing an app, We ran into an issues where the iPhone `UIKeyboard` slide up and cover the `UITextField/UITextView`. `IQKeyboardManager` allows you to prevent issues of the keyboard sliding up and covering a text field without needing you to enter any code. To use `IQKeyboardManager` you simply need to add the framework to your project or add the source files to your project.\r\n\r\n####Key Features\r\n\r\n1) `ZERO LINE OF CODE`\r\n\r\n2) `Works Automatically`\r\n\r\n3) `No More UIScrollView`\r\n\r\n4) `No More Subclasses`\r\n\r\n5) `No More Manual Work`\r\n\r\n6) `No More #imports`\r\n\r\n`IQKeyboardManager` works on all orientations, and with the toolbar. There are also nice optional features allowing you to customize the distance from the text field, add the next/previous done button as a keyboard UIToolbar, play sounds when the user navigations through the form and more.\r\n\r\n## Screenshot\r\n[![IQKeyboardManager](./KeyboardTextFieldDemo/Screenshot/IQKeyboardManagerScreenshot.png)](http://youtu.be/6nhLw6hju2A)\r\n[![Settings](./KeyboardTextFieldDemo/Screenshot/IQKeyboardManagerSettings.png)](http://youtu.be/6nhLw6hju2A)\r\n\r\n## GIF animation\r\n[![IQKeyboardManager](./KeyboardTextFieldDemo/Screenshot/IQKeyboardManager.gif)](http://youtu.be/6nhLw6hju2A)\r\n\r\n## Video\r\n\r\n<a href=\"http://youtu.be/WAYc2Qj-OQg\" target=\"_blank\"><img src=\"http://img.youtube.com/vi/WAYc2Qj-OQg/0.jpg\" \r\nalt=\"IQKeyboardManager Demo Video\" width=\"480\" height=\"360\" border=\"10\" /></a>\r\n\r\n## Requirements\r\n\r\n#### IQKeyboardManager:-\r\n\r\nMinimum iOS Target: iOS 5.0\r\n\r\nMinimum Xcode Version: Xcode 5.0\r\n\r\n#### Demo Project:-\r\n\r\nMinimum Xcode Version: Xcode 6.0\r\n\r\n\r\nInstallation\r\n==========================\r\n\r\n#### Cocoapod Method:-\r\n\r\nIQKeyboardManager is available through [CocoaPods](http://cocoapods.org), to install\r\nit simply add the following line to your Podfile: ([#9](https://github.com/hackiftekhar/IQKeyboardManager/issues/9))\r\n\r\n    pod 'IQKeyboardManager'\r\n\r\n#### Framework Method:-\r\n\r\n**Step1:-** Link project against `KeyboardManager.framework` found in \"IQKeyboardManager Framework\" directory.\r\n\r\n[Linking to a Library or Framework](https://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaLibrarytoaTarget.html)\r\n\r\nIf you need to port your project to another location you may need to adjust `Framework Search Paths` settings in `Project Settings`.\r\n\r\n[Framework Search Path](http://stackoverflow.com/questions/19130744/xcode-5-framework-library-search-path-absolute-address)\r\n\r\n**Step2:-** Drag and drop the resource bundle `IQKeyboardManager.bundle` found in same directory to your project. `Resources` folder is the best place to put it but you can put it anywhere.\r\n\r\n**Step3:-** Add `-ObjC` flag in `other linker flag`. That's it. Now you can build your project to see the magic.\r\n\r\n[Adding Linker Flag](http://docs.millennialmedia.com/iOS-SDK/iOSAddingLinkerFlag.html)\r\n\r\n\r\n#### Source Code Method:-\r\n\r\nJust drag and drop `IQKeyBoardManager` directory from demo project to your project. That's it. No need to write any single line of code. It will enable automatically.\r\n\r\n## Known Issues:-\r\n\r\n![Known Issue 1](./KeyboardTextFieldDemo/Screenshot/IQKeyboardManagerKnownIssue1.png)\r\n\r\n1) **Keyboard does not appear in iOS Simulator** ([#62](https://github.com/hackiftekhar/IQKeyboardManager/issues/62), [#72](https://github.com/hackiftekhar/IQKeyboardManager/issues/72), [#75](https://github.com/hackiftekhar/IQKeyboardManager/issues/75), [#90](https://github.com/hackiftekhar/IQKeyboardManager/issues/90), [#100](https://github.com/hackiftekhar/IQKeyboardManager/issues/100))\r\n     \r\nIf keyboard does not appear in iOS Simulator and only toolbar is appearing over it (if enableAutoToolbar = YES), then check this setting\r\n     \r\n**Xcode 6:-** Goto ***iOS Simulator->Menu->Hardware->Keyboard->Connect Hardware Keyboard***, and deselect that.\r\n\r\n**Xcode 5 and earlier:-** Goto ***iOS Simulator->Menu->Hardware->Simulate Hardware Keyboard***, and deselect that.\r\n    \r\n\r\nManual Management:-\r\n---\r\n\r\n#### UINavigationBar:-\r\n\r\n  If you don't want to hide the default UINavigationBar of UINavigationController when keyboardManager slides up the view, then just change the UIView class to UIScrollView from the storyboard or xib.([#21](https://github.com/hackiftekhar/IQKeyboardManager/issues/21), [#24](https://github.com/hackiftekhar/IQKeyboardManager/issues/24))\r\n\r\n![image](./KeyboardTextFieldDemo/Screenshot/UINavigationBarExample.png)\r\n\r\n\r\n  If you are not using storyboard or xib and creating your view programmatically. Then you need to override '-(void)loadView' method of UIViewController, and need to set an UIScrollView instance to self.view.\r\n\r\n    -(void)loadView\r\n    {\r\n        UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\r\n        self.view = scrollView;\r\n    }\r\n \r\n#### Disable for a ViewController:-\r\n\r\n If you would like to disable `IQKeyboardManager` for a particular ViewController then you should disable IQKeyboardManager on `ViewDidAppear` and again enable it on `ViewWillDisappear`.\r\n\r\n    #import \"IQKeyboardManager.h\"\r\n    @implementation ExampleViewController\r\n    {\r\n        BOOL _wasKeyboardManagerEnabled;\r\n    }\r\n    \r\n    -(void)viewDidAppear:(BOOL)animated\r\n    {\r\n        [super viewDidAppear:animated];\r\n        _wasKeyboardManagerEnabled = [[IQKeyboardManager sharedManager] isEnabled];\r\n        [[IQKeyboardManager sharedManager] setEnable:NO];\r\n    }\r\n\r\n    -(void)viewWillDisappear:(BOOL)animated\r\n    {\r\n        [super viewWillDisappear:animated];\r\n        [[IQKeyboardManager sharedManager] setEnable:_wasKeyboardManagerEnabled];\r\n    }\r\n\r\n    @end\r\n\r\n\r\n#### Keyboard Return Key Handling:-\r\n  If you would like to implement keyboard `Return Key` as `Next` button, then you can use `IQKeyboardReturnKeyHandler`.([#38](https://github.com/hackiftekhar/IQKeyboardManager/issues/38), [#63](https://github.com/hackiftekhar/IQKeyboardManager/issues/63))\r\n  \r\n  1) Create an instance variable of `IQKeyboardReturnKeyHandler` and instantiate it in `viewDidLoad` with ViewController object like this:-\r\n  \r\n```\r\n@implementation ViewController\r\n{\r\n    IQKeyboardReturnKeyHandler *returnKeyHandler;\r\n}\r\n\r\n- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    \r\n    returnKeyHandler = [[IQKeyboardReturnKeyHandler alloc] initWithViewController:self];\r\n}\r\n```\r\n   It assign all the responderView delegates to self, and change keybord Return Key to Next key.\r\n\r\n2) set instance variable to nil in `dealloc` method.\r\n\r\n```\r\n-(void)dealloc\r\n{\r\n    returnKeyHandler = nil;\r\n}\r\n```\r\n\r\n\r\n#### UIToolbar(IQToolbar):-\r\n\r\n1) If you don't want to add automatic toolbar over keyboard for a specific textField then you should add a UIView as it's toolbar like this:-([#89](https://github.com/hackiftekhar/IQKeyboardManager/issues/89))\r\n```\r\ntextField.inputAccessoryView = [[UIView alloc] init];\r\n```\r\n\r\n2) If you need your own control over the previous/next/done button then you should use the UIView category methods to add toolbar over your textField. The UIView category methods are defined in `IQUIView+IQKeyboardToolbar.h` file. You can use them like this:-([#40](https://github.com/hackiftekhar/IQKeyboardManager/issues/40))\r\n```\r\n-(void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    \r\n    //Adding done button for textField1\r\n    [textField1 addDoneOnKeyboardWithTarget:self action:@selector(doneAction:)];\r\n    \r\n    //Adding previous/next/done button for textField2\r\n    [textField2 addPreviousNextDoneOnKeyboardWithTarget:self previousAction:@selector(previousAction:) nextAction:@selector(nextAction:) doneAction:@selector(doneAction:)];\r\n    \r\n    //Adding cancel/done button for textField3\r\n    [textField3 addCancelDoneOnKeyboardWithTarget:self cancelAction:@selector(cancelAction:) doneAction:@selector(doneAction:)];\r\n}\r\n\r\n/*!\tpreviousAction. */\r\n-(void)previousAction:(id)button\r\n{\r\n    //previousAction\r\n}\r\n\r\n/*!\tnextAction. */\r\n-(void)nextAction:(id)button\r\n{\r\n    //nextAction\r\n}\r\n\r\n/*!\tdoneAction. */\r\n-(void)doneAction:(UIBarButtonItem*)barButton\r\n{\r\n    //doneAction\r\n}\r\n\r\n/*!\tcancelAction. */\r\n-(void)cancelAction:(UIBarButtonItem*)barButton\r\n{\r\n    //cancelAction\r\n}\r\n\r\n```\r\n\r\n#### Doing custom work on textField with returning NO in `textFieldShouldBeginEditing:` delegate:-\r\n\r\nGenerally if developer need to perform some custom task on a particular textField click, then usually developer write their custom code inside `textFieldShouldBeginEditing:` and returning NO for that textField. But if you are using IQKeyboardManager, then IQKeyboardManager also asks textField to recognize it can become first responder or not using `canBecomeFirstResponder` in `IQUIView+Hierarchy` category, and textField asks it's delegate to respond from `textFieldShouldBeginEditing:`, so this method is called for each textField everytime when a textField becomeFirstResponder. Unintentionally custom code runs multiple times even when we do not touch the textField to become it as first responder. To overcome this situation please use `isAskingCanBecomeFirstResponder` BOOL property to check that the delegate is called by IQKeyboardManager or not. ([#88](https://github.com/hackiftekhar/IQKeyboardManager/issues/88))\r\n\r\n1) You may need to import `IQUIView+Hierarchy` category\r\n```\r\n#import \"IQUIView+Hierarchy.h\"\r\n```\r\n\r\n2) check for `isAskingCanBecomeFirstResponder` in `textFieldShouldBeginEditing:` delegate.\r\n\r\n```\r\n-(BOOL)textFieldShouldBeginEditing:(UITextField *)textField\r\n{\r\n    if (textField == customWorkTextField)\r\n    {\r\n        if (textField.isAskingCanBecomeFirstResponder == NO)\r\n        {\r\n            //Do your work on tapping textField.\r\n            [[[UIAlertView alloc] initWithTitle:@\"IQKeyboardManager\" message:@\"Do your custom work here\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil, nil] show];\r\n        }\r\n\r\n        return NO;\r\n    }\r\n    else    return YES;\r\n}\r\n```\r\n\r\n## Control Flow Diagram\r\n[![IQKeyboardManager CFD](./KeyboardTextFieldDemo/Screenshot/IQKeyboardManagerCFD.jpg)](https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/KeyboardTextFieldDemo/Screenshot/IQKeyboardManagerCFD.jpg)\r\n\r\n\r\nProperties and functions usage:-\r\n---\r\n1)\t`+sharedManager`\r\nReturns the default singleton instance.\r\n\r\n2)\t`enable`\r\nUse this to enable/disable managing distance between keyboard & textField/textView).\r\n\r\n3)\t`keyboardDistanceFromTextField`\r\nSet Distance between keyboard & textField. Can't be less than zero. Default is 10.\r\n\r\n4)\t`enableAutoToolbar`\r\nEnable autoToolbar behaviour. If It is set to NO. You have to manually create UIToolbar for keyboard. Default is YES.\r\n\r\n5)\t`toolbarManageBehaviour`\r\nSetting toolbar behaviour to IQAutoToolbarBySubviews to manage previous/next according to UITextField's hierarchy in it's SuperView. Set it to IQAutoToolbarByTag to manage previous/next according to UITextField's tag property in increasing order. Default is IQAutoToolbarBySubviews.\r\n\r\n6)\t`shouldToolbarUsesTextFieldTintColor`\r\nIf YES, then uses textField's tintColor property for IQToolbar, otherwise tintColor is black. Default is NO. ([#27](https://github.com/hackiftekhar/IQKeyboardManager/issues/27))\r\n\r\n7)\t`shouldShowTextFieldPlaceholder`\r\nIf YES, then it add the textField's placeholder text on IQToolbar. Default is YES. ([#27](https://github.com/hackiftekhar/IQKeyboardManager/issues/27))\r\n\r\n8)\t`placeholderFont`\r\nplaceholder Font. Default is nil. ([#27](https://github.com/hackiftekhar/IQKeyboardManager/issues/27))\r\n\r\n9)\t`canAdjustTextView`\r\nGiving permission to modify TextView's frame. Adjust textView's frame when it is too big in height. Default is NO. ([#30](https://github.com/hackiftekhar/IQKeyboardManager/issues/30))\r\n\r\n10)\t`overrideKeyboardAppearance`\r\nOverride the keyboardAppearance for all textField/textView. Default is NO.\r\n\r\n11)\t`keyboardAppearance`\r\nIf overrideKeyboardAppearance is YES, then all the textField keyboardAppearance is set using this property.\r\n\r\n12)\t`shouldResignOnTouchOutside`\r\nResign textField if touched outside of UITextField/UITextView. ([#14](https://github.com/hackiftekhar/IQKeyboardManager/issues/14))\r\n\r\n13)\t`-resignFirstResponder`\r\nResigns currently first responder field.\r\n\r\n14)\t`shouldPlayInputClicks`\r\nIf YES, then it plays inputClick sound on next/previous/done click. Default is NO.\r\n\r\n15)\t`shouldAdoptDefaultKeyboardAnimation`\r\nIf YES, then uses keyboard default animation curve style to move view, otherwise uses UIViewAnimationOptionCurveEaseOut animation style. Default is YES.\r\n\r\n16)\t`preventShowingBottomBlankSpace`\r\nPrevent to show bottom black area when keyboard slide up the view. ([#93](https://github.com/hackiftekhar/IQKeyboardManager/issues/93))\r\n\r\n\r\n\r\n## Feature:-\r\n\r\n 1) Support Device Orientation.\r\n \r\n 2) Enable/Disable Keyboard Manager when needed with `enable` boolean.\r\n\r\n 3) Easiest integration.\r\n\r\n 4) AutoHandle UIToolbar as a accessoryInputView of textField/textView with `enableAutoToolbar` boolean.\r\n\r\n 5) AutoHandle UIToolbar can be manged by superview's hierarchy or can be managed by tag property of textField/textView using `toolbarManageBehaviour` enum.\r\n\r\n 6) `UIView` Category for easily adding Next/Previous and Done button as Keyboard UIToolBar, even automatic with `enableAutoToolbar` boolean.\r\n\r\n 7) Enable/Disable Next/Previous buttons with Category methods, even automatic with `enableAutoToolbar` boolean.\r\n\r\n 8) Set keyboard distance from textFields using `keyboardDistanceFromTextField`.\r\n \r\n 9) Resign keyboard on touching outside using `shouldResignOnTouchOutside`.\r\n \r\n 10) Manage UITextView's frame when it's hight is too large to fit on screen with `canAdjustTextView` boolean.\r\n \r\n 11) Can manage `UITextField/UITextView` inside `UITableView/UIScrollView`.\r\n \r\n 12) Can play input sound on Next/Previous/Done click.\r\n\r\nLICENSE\r\n---\r\nDistributed under the MIT License.\r\n\r\nContributions\r\n---\r\nAny contribution is more than welcome! You can contribute through pull requests and issues on GitHub.\r\n\r\nAuthor\r\n---\r\nIf you wish to contact me, email at: hack.iftekhar@gmail.com\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}