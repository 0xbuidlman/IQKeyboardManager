{"name":"IQKeyboardManager","tagline":"Keyboard TextField Manager","body":"IQKeyboardManager\r\n==========================\r\n\r\nOften while developing an app, We ran into an issues where the iPhone `UIKeyboard` slide up and cover the `UITextField/UITextView`. `IQKeyboardManager` allows you to prevent issues of the keyboard sliding up and covering a text field without needing you to enter any code. One of the Speciality of this Library is `It Works Automatically`. `ZERO LINE OF CODE`, `No More imports`, `No More Subclasses`, `No More Manual Work`. To use `IQKeyboardManager` you simply need to add the framework to your project or add the source files to your project.\r\n\r\n`IQKeyboardManager` works on all orientations, and with the toolbar. There are also nice optional features allowing you to customize the distance from the text field, add the next/previous done button as a keyboard UIToolbar, play sounds when the user navigations through the form and more.\r\n\r\n## Screenshot\r\n[![IQKeyboardManager](./KeyboardTextFieldDemo/Screenshot/IQKeyboardManagerScreenshot.png)](http://youtu.be/6nhLw6hju2A)\r\n[![Settings](./KeyboardTextFieldDemo/Screenshot/IQKeyboardManagerSettings.png)](http://youtu.be/6nhLw6hju2A)\r\n\r\n## Video\r\n\r\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=6nhLw6hju2A\r\n\" target=\"_blank\"><img src=\"http://img.youtube.com/vi/6nhLw6hju2A/0.jpg\" \r\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /></a>\r\n\r\n## Requirements\r\n\r\n#### IQKeyboardManager:-\r\n\r\nMinimum iOS Target: iOS 5.0\r\n\r\nMinimum Xcode Version: Xcode 5.0\r\n\r\n#### Demo Project:-\r\n\r\nMinimum Xcode Version: Xcode 6.0\r\n\r\n\r\nInstallation\r\n==========================\r\n\r\n#### Cocoapod:-\r\n\r\nIQKeyboardManager is available through [CocoaPods](http://cocoapods.org), to install\r\nit simply add the following line to your Podfile:\r\n\r\n    pod 'IQKeyboardManager'\r\n\r\n#### Framework:-\r\n\r\n**Step1:-** Link project against `KeyboardManager.framework` found in \"IQKeyboardManager Framework\" directory.\r\n\r\n[Linking to a Library or Framework](https://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaLibrarytoaTarget.html)\r\n\r\nIf you need to port your project to another location you may need to adjust `Framework Search Paths` settings in `Project Settings`.\r\n\r\n[Framework Search Path](http://stackoverflow.com/questions/19130744/xcode-5-framework-library-search-path-absolute-address)\r\n\r\n**Step2:-** Drag and drop the resource bundle `IQKeyboardManager.bundle` found in same directory to your project. `Resources` folder is the best place to put it but you can put it anywhere.\r\n\r\n**Step3:-** Add `-ObjC` flag in `other linker flag`. That's it. Now you can build your project to see the magic.\r\n\r\n[Adding Linker Flag](http://docs.millennialmedia.com/iOS-SDK/iOSAddingLinkerFlag.html)\r\n\r\n\r\n#### Source Code:-\r\n\r\nJust drag and drop `IQKeyBoardManager` directory from demo project to your project. That's it. No need to write any single line of code. It will enable automatically.\r\n\r\nManual Management:-\r\n---\r\n\r\n#### UINavigationBar:-\r\n\r\n  If you don't want to hide the default UINavigationBar of UINavigationController when keyboardManager slides up the view, then just change the UIView class to UIScrollView from the storyboard or xib.\r\n\r\n[![image](./KeyboardTextFieldDemo/Screenshot/UINavigationBarExample.png)]\r\n\r\n\r\n  If you are not using storyboard or xib and creating your view programmatically. Then you need to override '-(void)loadView' method of UIViewController, and need to set an UIScrollView instance to self.view.\r\n\r\n    -(void)loadView\r\n    {\r\n        UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\r\n        self.view = scrollView;\r\n    }\r\n \r\n#### Disable for a ViewController\r\n\r\n If you want to disable `IQKeyboardManager` for a particular ViewController then you should disable IQKeyboardManager on `ViewDidAppear` and again enable it on `ViewWillDisappear`.\r\n\r\n    #import \"IQKeyboardManager.h\"\r\n    @implementation ExampleViewController\r\n    {\r\n        BOOL _wasKeyboardManagerEnabled;\r\n    }\r\n    \r\n    -(void)viewDidAppear:(BOOL)animated\r\n    {\r\n        [super viewDidAppear:animated];\r\n        _wasKeyboardManagerEnabled = [[IQKeyboardManager sharedManager] isEnabled];\r\n        [[IQKeyboardManager sharedManager] setEnable:NO];\r\n    }\r\n\r\n    -(void)viewWillDisappear:(BOOL)animated\r\n    {\r\n        [super viewWillDisappear:animated];\r\n        [[IQKeyboardManager sharedManager] setEnable:_wasKeyboardManagerEnabled];\r\n    }\r\n\r\n    @end\r\n\r\n\r\n#### Keyboard Return Key Handling\r\n  If you would like to implement keyboard `Return Key` as `Next` button, then you can use `IQKeyboardReturnKeyHandler`.\r\n  \r\n  1) Create an instance variable of `IQKeyboardReturnKeyHandler` and instantiate it in `viewDidLoad` with ViewController object like this:-\r\n  \r\n```\r\n@implementation ViewController\r\n{\r\n    IQKeyboardReturnKeyHandler *returnKeyHandler;\r\n}\r\n\r\n- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    \r\n    returnKeyHandler = [[IQKeyboardReturnKeyHandler alloc] initWithViewController:self];\r\n}\r\n```\r\n   It assign all the responderView delegates to self, and change keybord Return Key to Next key.\r\n\r\n2) set instance variable to nil in `dealloc` method.\r\n\r\n```\r\n-(void)dealloc\r\n{\r\n    returnKeyHandler = nil;\r\n}\r\n```\r\n\r\n\r\n#### UIToolbar(IQToolbar):-\r\n\r\n1) If you don't want to add automatic toolbar over keyboard for a specific textField then you should add a UIView as it's toolbar like this:-\r\n```\r\ntextField.inputAccessoryView = [[UIView alloc] init];\r\n```\r\n\r\n2) If you need your own control over the previous/next/done button then you should use the UIView category methods to add toolbar over your textField. The UIView category methods are defined in `IQUIView+IQKeyboardToolbar.h` file. You can use them like this:-\r\n```\r\n-(void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    \r\n    //Adding done button for textField1\r\n    [textField1 addDoneOnKeyboardWithTarget:self action:@selector(doneAction:)];\r\n    \r\n    //Adding previous/next/done button for textField2\r\n    [textField2 addPreviousNextDoneOnKeyboardWithTarget:self previousAction:@selector(previousAction:) nextAction:@selector(nextAction:) doneAction:@selector(doneAction:)];\r\n    \r\n    //Adding cancel/done button for textField3\r\n    [textField3 addCancelDoneOnKeyboardWithTarget:self cancelAction:@selector(cancelAction:) doneAction:@selector(doneAction:)];\r\n}\r\n\r\n/*!\tpreviousAction. */\r\n-(void)previousAction:(id)button\r\n{\r\n    //previousAction\r\n}\r\n\r\n/*!\tnextAction. */\r\n-(void)nextAction:(id)button\r\n{\r\n    //nextAction\r\n}\r\n\r\n/*!\tdoneAction. */\r\n-(void)doneAction:(UIBarButtonItem*)barButton\r\n{\r\n    //doneAction\r\n}\r\n\r\n/*!\tcancelAction. */\r\n-(void)cancelAction:(UIBarButtonItem*)barButton\r\n{\r\n    //cancelAction\r\n}\r\n\r\n```\r\n\r\nProperties and functions usage:-\r\n---\r\n1)\t`+sharedManager`\r\nReturns the default singleton instance.\r\n\r\n2)\t`enable`\r\nUse this to enable/disable managing distance between keyboard & textField/textView).\r\n\r\n3)\t`keyboardDistanceFromTextField`\r\nSet Distance between keyboard & textField. Can't be less than zero. Default is 10.\r\n\r\n4)\t`enableAutoToolbar`\r\nEnable autoToolbar behaviour. If It is set to NO. You have to manually create UIToolbar for keyboard. Default is YES.\r\n\r\n5)\t`toolbarManageBehaviour`\r\nSetting toolbar behaviour to IQAutoToolbarBySubviews to manage previous/next according to UITextField's hierarchy in it's SuperView. Set it to IQAutoToolbarByTag to manage previous/next according to UITextField's tag property in increasing order. Default is IQAutoToolbarBySubviews.\r\n\r\n6)\t`shouldToolbarUsesTextFieldTintColor`\r\nIf YES, then uses textField's tintColor property for IQToolbar, otherwise tintColor is black. Default is NO.\r\n\r\n7)\t`shouldShowTextFieldPlaceholder`\r\nIf YES, then it add the textField's placeholder text on IQToolbar. Default is YES.\r\n\r\n8)\t`placeholderFont`\r\nplaceholder Font. Default is nil.\r\n\r\n9)\t`canAdjustTextView`\r\nGiving permission to modify TextView's frame. Adjust textView's frame when it is too big in height. Default is NO.\r\n\r\n10)\t`overrideKeyboardAppearance`\r\nOverride the keyboardAppearance for all textField/textView. Default is NO.\r\n\r\n11)\t`keyboardAppearance`\r\nIf overrideKeyboardAppearance is YES, then all the textField keyboardAppearance is set using this property.\r\n\r\n12)\t`shouldResignOnTouchOutside`\r\nResign textField if touched outside of UITextField/UITextView.\r\n\r\n13)\t`-resignFirstResponder`\r\nResigns currently first responder field.\r\n\r\n14)\t`shouldPlayInputClicks`\r\nIf YES, then it plays inputClick sound on next/previous/done click. Default is NO.\r\n\r\n15)\t`shouldAdoptDefaultKeyboardAnimation`\r\nIf YES, then uses keyboard default animation curve style to move view, otherwise uses UIViewAnimationOptionCurveEaseOut animation style. Default is YES.\r\n\r\n\r\n\r\n## Feature:-\r\n\r\n 1) Support Device Orientation.\r\n \r\n 2) Enable/Disable Keyboard Manager when needed with `enable` boolean.\r\n\r\n 3) Easiest integration.\r\n\r\n 4) AutoHandle UIToolbar as a accessoryInputView of textField/textView with `enableAutoToolbar` boolean.\r\n\r\n 5) AutoHandle UIToolbar can be manged by superview's hierarchy or can be managed by tag property of textField/textView using `toolbarManageBehaviour` enum.\r\n\r\n 6) `UIView` Category for easily adding Next/Previous and Done button as Keyboard UIToolBar, even automatic with `enableAutoToolbar` boolean.\r\n\r\n 7) Enable/Disable Next/Previous buttons with Category methods, even automatic with `enableAutoToolbar` boolean.\r\n\r\n 8) Set keyboard distance from textFields using `keyboardDistanceFromTextField`.\r\n \r\n 9) Resign keyboard on touching outside using `shouldResignOnTouchOutside`.\r\n \r\n 10) Manage UITextView's frame when it's hight is too large to fit on screen with `canAdjustTextView` boolean.\r\n \r\n 11) Can manage `UITextField/UITextView` inside `UITableView/UIScrollView`.\r\n \r\n 12) Can play input sound on Next/Previous/Done click.\r\n\r\nLICENSE\r\n---\r\nDistributed under the MIT License.\r\n\r\nContributions\r\n---\r\nAny contribution is more than welcome! You can contribute through pull requests and issues on GitHub.\r\n\r\nAuthor\r\n---\r\nIf you wish to contact me, email at: hack.iftekhar@gmail.com\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}