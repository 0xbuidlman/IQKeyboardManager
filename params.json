{"name":"IQKeyboardManager","tagline":"Keyboard TextField Manager","body":"Keyboard TextField Manager\r\n==========================\r\n\r\nOften while developing an app, We ran into an issues where the iPhone UIKeyboard slide up and cover the `UITextField/UITextView`.\r\n\r\n## Screen Shot\r\n![image](./KeyboardTextFieldDemo/Screenshot/IQKeyboardManagerScreenshot.png)\r\n\r\n\r\nUsage\r\n---\r\nJust drag and drop `IQKeyboardManager` class in your project. In your `appDelegate.m` write just one line of code. This will handle all UITextField/UITextView covering problem.\r\n\r\n```  objc\r\n//AppDelegate.m\r\n\r\n#import \"AppDelegate.h\"\r\n#import \"IQKeyboardManager.h\"\r\n\r\n@implementation AppDelegate\r\n\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n    //ONE LINE OF CODE.\r\n    //Enabling keyboard manager(Use this line to enable managing distance between keyboard & textField/textView).\r\n    [[IQKeyboardManager sharedManager] setEnable:YES];\r\n    \r\n    //(Optional)Set Distance between keyboard & textField, Default is 10.\r\n    //[[IQKeyboardManager sharedManager] setKeyboardDistanceFromTextField:15];\r\n\r\n    //(Optional)Enable autoToolbar behaviour. If It is set to NO. You have to manually create UIToolbar for keyboard.\r\n    //[[IQKeyboardManager sharedManager] setEnableAutoToolbar:YES];\r\n\r\n    //(Optional)Setting toolbar behaviour to IQAutoToolbarBySubviews to manage previous/next according to UITextField's hirarchy in it's SuperView. Set it to IQAutoToolbarByTag to manage previous/next according to UITextField's tag property in increasing order.\r\n    //[[IQKeyboardManager sharedManager] setToolbarManageBehaviour:IQAutoToolbarBySubviews];\r\n\r\n    //(Optional)Resign textField if touched outside of UITextField/UITextView.\r\n    //[[IQKeyboardManager sharedManager] setShouldResignOnTouchOutside:YES];\r\n    \r\n    //(Optional)Giving permission to modify TextView's frame\r\n    //[[IQKeyboardManager sharedManager] setCanAdjustTextView:YES];\r\n\r\n    [self.window makeKeyAndVisible];\r\n    return YES;\r\n}\r\n\r\n\r\n\r\n```\r\n\r\n\r\n## Installation\r\n\r\nIQKeyboardManager is available through [CocoaPods](http://cocoapods.org), to install\r\nit simply add the following line to your Podfile:\r\n\r\n    pod 'IQKeyboardManager', '~>2.5.0'\r\n\r\n\r\n\r\n\r\n\r\n## Feature:-\r\n\r\n 1) Support Device Orientation.\r\n \r\n 2) Enable/Disable Keyboard Manager when needed with `enable` boolean.\r\n\r\n 3) Easiest integration.\r\n\r\n 4) AutoHandle UIToolbar as a accessoryInputView of textField/textView with `enableAutoToolbar` boolean.\r\n\r\n 5) AutoHandle UIToolbar can be manged by superview's hierarchy or can be managed by tag property of textField/textView using `toolbarManageBehaviour` enum.\r\n\r\n 6) `UIView` Category for easily adding Next/Previous and Done button as Keyboard UIToolBar, even automatic with `enableAutoToolbar` boolean.\r\n\r\n 7) Enable/Disable Next/Previous buttons with Category methods, even automatic with `enableAutoToolbar` boolean.\r\n\r\n 8) Set keyboard distance from textFields using `keyboardDistanceFromTextField`.\r\n \r\n 9) Resign keyboard on touching outside using `shouldResignOnTouchOutside`.\r\n \r\n 10) Manage UITextView's frame when it's hight is too large to fit on screen with `canAdjustTextView` boolean.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}